# متغیرها، عبارات و دستورات {#variables-expressions-commands}

برخی دستورات پایتون شامل مقادیری است که مجدداً دراثنای برنامه، برنامه‌نویس
 به آن نیاز خواهد داشت. 
 بنابراین ما به عنوان برنامه‌نویس می‌بایست یک نام نمادین برای این مقادیر تعریف کنیم 
 که در وقت لازم با این نام تعریف شده، پایتون را متوجه استفاده از آن مقدار موردنظر 
 گردانیم. 
 واژه‌ای که برای این نام مخصوص استفاده می‌شود، 
 **Variable** 
  یا **متغیر** است:

```python
x = 6
print(x)
```
```output
6
```

```python
y = x * 7
print(y)
```
```output
42
```

در این مثال ساده، ما سعی کردیم به پایتون بگوییم در ابتدا برای مقدار `6`، برچسبی به نام 
`x`
در نظر بگیرد و سپس در دستور بعدی همین مقدار را با نام 
`x`
بازیابی کردیم. آنگاه آن را در `7` ضرب کرده و حاصل آن را در متغیر جدیدی با نام 
`y` 
ذخیره کردیم. 

دو خط مربوط به تابع 
`print`
مقادیر 
`x` 
و 
`y` 
صرفاً برای مشاهده مقادیر ذخیره شده در متغیرهای بکار رفته در پرانتز می‌باشد. 

گرفتن ورودی از کاربر به صورت زیر است

```python
name = input("Enter your name: ")
print("Hello", name)
```
```output
Enter your name: Mohsen
Hello Mohsen
```

اگر ورودی عدد باشد باید توسط `input` در قالب عدد وارد شود.

```python
age = int(input("Enter your age: "))
print("You are", age, "years old.")
```
```output
Enter your age: 30
You are 30 years old.
```

## عبارات بولی {#boolean-expressions}

عبارت بولی
[(Boolean expressions)]{dir=ltr}
عبارتی است که یا درست یا نادرست است. 
عملگر`==` برای مقایسه دو عملوند بکار می‌رود و نتیجه آن درستی 
[(`True`)]{dir=ltr}
یا نادرستی 
[(`False`)]{dir=ltr} 
نتیجه این ارزیابی را نشان می‌دهد:

```python
5 == 5
```
```output
True
```

```python
5 == 6
```
```output
False
```

عملگر
`==`
یکی از عملگرهای مقایسه‌ای است، سایر عملگرها عبارتند از:


```python
x != y        # x is not equal to y
x > y         # x is greater than y
x < y         # x is less than y
x >= y        # x is greater than or equal to y
x <= y        # x is less than or equal to y
x is y        # x is the same as y
x is not y    # x is not the same as y
```

## عملگرهای منطقی {#logical-operators}

سه عملگر منطقی
([Logical Operators]{dir=ltr})
وجود دارد: 
`and`, `or` 
و 
`not`
. 
برای مثال:

```python
x > 0 and x < 10
```

عملوندهای عملگرهای منطقی باید عبارات بولی باشند،
اما در پایتون هر عدد غیر صفر 
نیز به صورت 
`True` 
تفسیر می‌شود. 

```python
17 and True
```
```output
True
```

## تمرین {#exercises}

::: {.remark} :::
با استفاده از ورودی ([`input()`]{dir=ltr}) تمرین‌ها انجام شود.
::::::



::: {.exercise} :::
<details>
<summary>
از کاربر نام و سن را بگیرد و نمایش دهد
</summary>
```python
# دریافت نام از کاربر
name = input("نام خود را وارد کنید: ")

# دریافت سن از کاربر
age = input("سن خود را وارد کنید: ")

# نمایش نام و سن
print("نام:", name)
print("سن:", age)
```
</details>
::::::

::: {.exercise} :::
<details>
<summary>
یک ماشین‌ حساب ساده برای جمع و تفریق بنویسید.
</summary>
```python
# این برنامه جمع دو عدد را انجام می‌دهد

# دریافت عدد اول از کاربر
num1 = input("عدد اول را وارد کن: ")
num1 = float(num1)  # تبدیل به عدد اعشاری

# دریافت عدد دوم از کاربر
num2 = input("عدد دوم را وارد کن: ")
num2 = float(num2)  # تبدیل به عدد اعشاری

# انجام جمع
sum = num1 + num2
# انجام تفریق
minus = num1 - num2

# نمایش نتیجه
print("نتیجه جمع =", sum)
print("نتیجه تفریق =", minus)
```

آیا میتونید برای ضرب و تقیسم هم بنویسید؟
</details>
::::::

::: {.exercise} :::
<details>
<summary>
یک برنامه بنویسید که دو عدد بگیرد و بزرگی عدد اول را بررسی کند.
‍
